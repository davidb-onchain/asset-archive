#!/bin/bash

# =============================================================================
# ASSET ARCHIVE DROPLET PROVISIONING SCRIPT
# =============================================================================
# This script is executed during droplet creation to set up the environment
# and deploy the Asset Archive application containers.
#
# Template variables are replaced by Terraform during deployment.
# =============================================================================

set -euo pipefail  # Exit on error, undefined vars, pipe failures

# Set non-interactive mode for all operations
export DEBIAN_FRONTEND=noninteractive

# Logging setup
exec 1> >(tee -a /var/log/provision.log)
exec 2> >(tee -a /var/log/provision.log >&2)

echo "==================================================================="
echo "Asset Archive Provisioning Started: $(date)"
echo "==================================================================="

# =============================================================================
# SYSTEM UPDATES AND DEPENDENCIES
# =============================================================================

# Set non-interactive mode for all apt operations
export DEBIAN_FRONTEND=noninteractive

echo "📦 Updating system packages..."
apt-get update

echo "📦 Upgrading system packages (non-interactive)..."
apt-get upgrade -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold"

echo "📦 Installing required packages..."
apt-get install -y \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg \
    lsb-release \
    software-properties-common \
    unzip \
    jq \
    htop \
    nano \
    git

# =============================================================================
# DOCKER INSTALLATION
# =============================================================================

echo "🐳 Installing Docker..."

# Add Docker's official GPG key
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

# Add Docker repository
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

# Install Docker
apt-get update
apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin

# Start and enable Docker
systemctl start docker
systemctl enable docker

# Add docker group (for future use)
groupadd -f docker

echo "✅ Docker installed successfully"

# =============================================================================
# DOCKER COMPOSE INSTALLATION
# =============================================================================

echo "🐳 Installing Docker Compose..."

# Install Docker Compose v2 (already included with docker-compose-plugin above)
# But let's verify and create symlink for compatibility
if ! command -v docker-compose &> /dev/null; then
    ln -sf /usr/libexec/docker/cli-plugins/docker-compose /usr/local/bin/docker-compose
fi

echo "✅ Docker Compose installed successfully"

# =============================================================================
# GITHUB CONTAINER REGISTRY AUTHENTICATION
# =============================================================================

echo "🔐 Setting up GitHub Container Registry authentication..."

# Create docker config directory
mkdir -p /root/.docker

# Note: For public images, no authentication is needed
# For private images, we would set up authentication here
echo "ℹ️ Using public container images - no authentication required"

# =============================================================================
# APPLICATION DIRECTORY SETUP
# =============================================================================

echo "📁 Setting up application directory..."

APP_DIR="/opt/asset-archive"
mkdir -p $APP_DIR
cd $APP_DIR

# =============================================================================
# ENVIRONMENT CONFIGURATION
# =============================================================================

echo "⚙️ Creating environment configuration..."

cat > .env << EOF
# =============================================================================
# ASSET ARCHIVE ENVIRONMENT CONFIGURATION
# Generated by Terraform on $(date)
# =============================================================================

# Database Configuration
POSTGRES_DB=${postgres_db}
POSTGRES_USER=${postgres_user}
POSTGRES_PASSWORD=${postgres_password}

# Strapi Configuration
APP_KEYS=${app_keys}
API_TOKEN_SALT=${api_token_salt}
ADMIN_JWT_SECRET=${admin_jwt_secret}
TRANSFER_TOKEN_SALT=${transfer_token_salt}
JWT_SECRET=${jwt_secret}
ENCRYPTION_KEY=${encryption_key}

# Project Information
PROJECT_NAME=${project_name}
ENVIRONMENT=${environment}

# Container Images
CMS_IMAGE=${cms_image}
FRONTEND_IMAGE=${frontend_image}
EOF

echo "✅ Environment configuration created"

# =============================================================================
# DOCKER COMPOSE CONFIGURATION
# =============================================================================

echo "🐳 Creating Docker Compose configuration..."

cat > docker-compose.yml << 'EOF'
services:
  postgres:
    image: postgres:15
    restart: always
    environment:
      - POSTGRES_DB=$${POSTGRES_DB}
      - POSTGRES_USER=$${POSTGRES_USER}
      - POSTGRES_PASSWORD=$${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  strapi:
    image: $${CMS_IMAGE}
    restart: always
    ports:
      - "1337:1337"
    environment:
      DATABASE_CLIENT: postgres
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: $${POSTGRES_DB}
      DATABASE_USERNAME: $${POSTGRES_USER}
      DATABASE_PASSWORD: $${POSTGRES_PASSWORD}
      DATABASE_SSL: false
      HOST: 0.0.0.0
      PORT: 1337
      APP_KEYS: $${APP_KEYS}
      API_TOKEN_SALT: $${API_TOKEN_SALT}
      ADMIN_JWT_SECRET: $${ADMIN_JWT_SECRET}
      TRANSFER_TOKEN_SALT: $${TRANSFER_TOKEN_SALT}
      JWT_SECRET: $${JWT_SECRET}
      ENCRYPTION_KEY: $${ENCRYPTION_KEY}
    volumes:
      - strapi_uploads:/opt/app/public/uploads
    depends_on:
      postgres:
        condition: service_healthy

  frontend:
    image: $${FRONTEND_IMAGE}
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_STRAPI_URL=http://localhost:1337
      - STRAPI_API_TOKEN=placeholder_token
    depends_on:
      - strapi

volumes:
  postgres_data:
  strapi_uploads:
EOF

echo "✅ Docker Compose configuration created"

# =============================================================================
# CONTAINER DEPLOYMENT
# =============================================================================

echo "🚀 Pulling and starting containers..."

# Pull the latest images
docker compose pull

# Start the services
docker compose up -d

echo "✅ Containers started successfully"

# =============================================================================
# HEALTH CHECKS AND VERIFICATION
# =============================================================================

echo "🔍 Performing health checks..."

# Wait for services to be ready
echo "⏳ Waiting for database to be ready..."
timeout 60 bash -c 'until docker compose exec -T postgres pg_isready -U strapi -d strapi; do sleep 2; done'

echo "⏳ Waiting for Strapi to be ready..."
timeout 120 bash -c 'until curl -f http://localhost:1337/admin; do sleep 5; done'

echo "⏳ Waiting for Frontend to be ready..."
timeout 120 bash -c 'until curl -f http://localhost:3000; do sleep 5; done'

# =============================================================================
# SYSTEM SERVICE SETUP
# =============================================================================

echo "⚙️ Setting up system services..."

# Create systemd service for auto-start
cat > /etc/systemd/system/asset-archive.service << EOF
[Unit]
Description=Asset Archive Application
Requires=docker.service
After=docker.service

[Service]
Type=oneshot
RemainAfterExit=yes
WorkingDirectory=$APP_DIR
ExecStart=/usr/bin/docker compose up -d
ExecStop=/usr/bin/docker compose down
TimeoutStartSec=0

[Install]
WantedBy=multi-user.target
EOF

# Enable the service
systemctl daemon-reload
systemctl enable asset-archive.service

echo "✅ System service configured"

# =============================================================================
# CONTAINER UPDATE SCRIPT
# =============================================================================

echo "📝 Creating container update script..."

# Create update script for future deployments
cat > /opt/asset-archive/update-containers.sh << 'EOF'
#!/bin/bash
set -euo pipefail

echo "🔄 Updating containers with new images..."
cd /opt/asset-archive

# Update docker-compose.yml with new image tags
if [ ! -z "$${CMS_IMAGE:-}" ]; then
    sed -i "s|image: .*asset-archive-cms.*|image: $${CMS_IMAGE}|g" docker-compose.yml
    echo "✅ Updated CMS image to: $${CMS_IMAGE}"
fi

if [ ! -z "$${FRONTEND_IMAGE:-}" ]; then
    sed -i "s|image: .*asset-archive-frontend.*|image: $${FRONTEND_IMAGE}|g" docker-compose.yml
    echo "✅ Updated Frontend image to: $${FRONTEND_IMAGE}"
fi

# Pull new images
echo "📥 Pulling new container images..."
docker compose pull

# Gracefully restart services (preserves volumes)
echo "🔄 Restarting containers..."
docker compose up -d --force-recreate --no-deps strapi frontend

# Wait for services to be healthy
echo "⏳ Waiting for services to be ready..."
timeout 60 bash -c 'until docker compose exec -T postgres pg_isready -U strapi -d strapi; do sleep 2; done' || echo "⚠️ Database health check timeout"
timeout 120 bash -c 'until curl -f http://localhost:1337/admin; do sleep 5; done' || echo "⚠️ Strapi health check timeout"
timeout 120 bash -c 'until curl -f http://localhost:3000; do sleep 5; done' || echo "⚠️ Frontend health check timeout"

echo "✅ Container update complete!"
docker compose ps
EOF

# Make script executable
chmod +x /opt/asset-archive/update-containers.sh

echo "✅ Container update script created"

# =============================================================================
# FIREWALL CONFIGURATION (UFW)
# =============================================================================

echo "🔥 Configuring local firewall..."

# Install and configure UFW as additional security layer
apt-get install -y ufw

# Reset UFW to defaults
ufw --force reset

# Default policies
ufw default deny incoming
ufw default allow outgoing

# Allow SSH (port 22)
ufw allow ssh

# Allow HTTP and HTTPS
ufw allow 80/tcp
ufw allow 443/tcp

# Allow application ports
ufw allow 3000/tcp  # Frontend
ufw allow 1337/tcp  # Strapi CMS

# Enable UFW
ufw --force enable

echo "✅ Firewall configured"

# =============================================================================
# MONITORING AND LOGGING SETUP
# =============================================================================

echo "📊 Setting up monitoring and logging..."

# Create log rotation for application logs
cat > /etc/logrotate.d/asset-archive << EOF
/var/log/asset-archive/*.log {
    daily
    missingok
    rotate 14
    compress
    delaycompress
    copytruncate
    create 644 root root
}
EOF

# Create monitoring directory
mkdir -p /var/log/asset-archive

# Create a simple health check script
cat > /usr/local/bin/asset-archive-health << 'EOF'
#!/bin/bash
cd /opt/asset-archive
echo "=== Asset Archive Health Check $(date) ===" >> /var/log/asset-archive/health.log
docker compose ps >> /var/log/asset-archive/health.log
echo "" >> /var/log/asset-archive/health.log
EOF

chmod +x /usr/local/bin/asset-archive-health

# Add cron job for health checks
echo "*/5 * * * * root /usr/local/bin/asset-archive-health" >> /etc/crontab

echo "✅ Monitoring and logging configured"

# =============================================================================
# COMPLETION
# =============================================================================

echo "==================================================================="
echo "🎉 Asset Archive Provisioning Completed Successfully!"
echo "==================================================================="
echo ""
echo "📊 System Information:"
echo "  - Hostname: $(hostname)"
echo "  - IP Address: $(curl -s http://ifconfig.me || echo 'Unable to detect')"
echo "  - Docker Version: $(docker --version)"
echo "  - Docker Compose Version: $(docker compose version)"
echo ""
echo "🔗 Application URLs:"
echo "  - Frontend: http://$(curl -s http://ifconfig.me):3000"
echo "  - Strapi CMS: http://$(curl -s http://ifconfig.me):1337"
echo "  - Strapi Admin: http://$(curl -s http://ifconfig.me):1337/admin"
echo ""
echo "📁 Application Directory: $APP_DIR"
echo "📝 Logs: /var/log/provision.log"
echo ""
echo "🐳 Container Status:"
docker compose ps
echo ""
echo "==================================================================="
echo "Provisioning completed at: $(date)"
echo "===================================================================" 

# Force recreation on script change
# Rebuild trigger: 2025-09-22-01-30-00 