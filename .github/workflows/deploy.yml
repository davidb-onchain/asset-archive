name: Deploy Containers

on:
  workflow_dispatch:
    inputs:
      cms_image:
        description: 'CMS image tag to deploy (optional)'
        required: false
        type: string
        default: 'ghcr.io/davidb-onchain/asset-archive-cms:latest'
      frontend_image:
        description: 'Frontend image tag to deploy (optional)'
        required: false
        type: string
        default: 'ghcr.io/davidb-onchain/asset-archive-frontend:latest'

permissions:
  contents: read

jobs:
  deploy:
    name: 'Deploy to Development'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Determine Image Tags
      id: images
      run: |
        CMS_IMAGE="${{ github.event.inputs.cms_image }}"
        FRONTEND_IMAGE="${{ github.event.inputs.frontend_image }}"
        
        if [ -z "$CMS_IMAGE" ]; then
          CMS_IMAGE="ghcr.io/${{ github.repository_owner }}/asset-archive-cms:latest"
        fi
        
        if [ -z "$FRONTEND_IMAGE" ]; then
          FRONTEND_IMAGE="ghcr.io/${{ github.repository_owner }}/asset-archive-frontend:latest"
        fi

        echo "cms_image=${CMS_IMAGE}" >> $GITHUB_OUTPUT
        echo "frontend_image=${FRONTEND_IMAGE}" >> $GITHUB_OUTPUT
        echo "Deploying CMS: ${CMS_IMAGE}"
        echo "Deploying Frontend: ${FRONTEND_IMAGE}"

    - name: Get Droplet IP Address
      id: droplet
      env:
        DO_PAT: ${{ secrets.DO_PAT }}
      run: |
        # Get droplet IP using DigitalOcean API
        DROPLET_IP=$(curl -s -X GET \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $DO_PAT" \
          "https://api.digitalocean.com/v2/droplets?tag_name=project:asset-archive" | \
          jq -r '.droplets[] | select(.name=="asset-archive-dev-app") | .networks.v4[] | select(.type=="public") | .ip_address')
        
        if [ -z "$DROPLET_IP" ] || [ "$DROPLET_IP" = "null" ]; then
          echo "❌ Could not find droplet IP address"
          exit 1
        fi
        
        echo "droplet_ip=${DROPLET_IP}" >> $GITHUB_OUTPUT
        echo "🌐 Droplet IP: ${DROPLET_IP}"

    - name: Wait for Droplet to be Ready
      run: |
        echo "⏳ Testing SSH connection to droplet..."
        echo "🔗 Connecting to: ${{ steps.droplet.outputs.droplet_ip }}"
        
        # Create proper SSH key file
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/ssh_key
        chmod 600 /tmp/ssh_key
        
        # Test SSH connection (should work immediately if droplet is ready)
        if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -i /tmp/ssh_key root@${{ steps.droplet.outputs.droplet_ip }} "echo 'SSH connection successful'" 2>/dev/null; then
          echo "✅ SSH connection successful"
        else
          echo "❌ SSH connection failed"
          echo "Debugging info:"
          echo "- Droplet IP: ${{ steps.droplet.outputs.droplet_ip }}"
          echo "- SSH key file created: $(ls -la /tmp/ssh_key)"
          rm -f /tmp/ssh_key
          exit 1
        fi
        
        rm -f /tmp/ssh_key

    - name: Deploy Container Updates via SSH
      run: |
        echo "🚀 Deploying containers via direct SSH..."
        
        # Create SSH key file
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/ssh_key
        chmod 600 /tmp/ssh_key
        
        # Execute deployment commands on the droplet
        ssh -o StrictHostKeyChecking=no -i /tmp/ssh_key root@${{ steps.droplet.outputs.droplet_ip }} << 'EOF'
          set -euo pipefail
          
          echo "🔄 Starting container update process..."
          cd /opt/asset-archive
          
          # Update docker-compose.yml with new image tags
          if [ ! -z "${{ steps.images.outputs.cms_image }}" ]; then
            sed -i "s|image: .*asset-archive-cms.*|image: ${{ steps.images.outputs.cms_image }}|g" docker-compose.yml
            echo "✅ Updated CMS image to: ${{ steps.images.outputs.cms_image }}"
          fi
          
          if [ ! -z "${{ steps.images.outputs.frontend_image }}" ]; then
            sed -i "s|image: .*asset-archive-frontend.*|image: ${{ steps.images.outputs.frontend_image }}|g" docker-compose.yml  
            echo "✅ Updated Frontend image to: ${{ steps.images.outputs.frontend_image }}"
          fi
          
          # Pull new images
          echo "📥 Pulling new container images..."
          docker compose pull
          
          # Gracefully restart services (preserves volumes)
          echo "🔄 Restarting containers..."
          docker compose up -d --force-recreate --no-deps strapi frontend
          
          # Wait for services to be healthy
          echo "⏳ Waiting for services to be ready..."
          timeout 60 bash -c 'until docker compose exec -T postgres pg_isready -U strapi -d strapi; do sleep 2; done' || echo "⚠️ Database health check timeout"
          timeout 120 bash -c 'until curl -f http://localhost:1337/admin; do sleep 5; done' || echo "⚠️ Strapi health check timeout"
          timeout 120 bash -c 'until curl -f http://localhost:3000; do sleep 5; done' || echo "⚠️ Frontend health check timeout"
          
          echo "✅ Container update complete!"
          docker compose ps
        EOF
        
        # Clean up SSH key
        rm -f /tmp/ssh_key

    - name: Deployment Summary
      run: |
        echo "## 🚀 Deployment Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Deployed Images:" >> $GITHUB_STEP_SUMMARY
        echo "- **CMS**: \`${{ steps.images.outputs.cms_image }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend**: \`${{ steps.images.outputs.frontend_image }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Environment:" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Droplet IP**: \`${{ steps.droplet.outputs.droplet_ip }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Access URLs:" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend**: http://${{ steps.droplet.outputs.droplet_ip }}:3000" >> $GITHUB_STEP_SUMMARY
        echo "- **CMS Admin**: http://${{ steps.droplet.outputs.droplet_ip }}:1337/admin" >> $GITHUB_STEP_SUMMARY 