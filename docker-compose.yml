services:
  postgres:
    image: postgres:15
    restart: always
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "55432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  strapi:
    build:
      context: ./services/cms
    restart: always
    ports:
      - "1337:1337"
    environment:
      DATABASE_CLIENT: postgres
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: ${POSTGRES_DB}
      DATABASE_USERNAME: ${POSTGRES_USER}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_SSL: false
      HOST: 0.0.0.0
      PORT: 1337
      APP_KEYS: ${APP_KEYS}
      API_TOKEN_SALT: ${API_TOKEN_SALT}
      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
      TRANSFER_TOKEN_SALT: ${TRANSFER_TOKEN_SALT}
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
    volumes:
      - strapi_uploads:/opt/app/public/uploads
    depends_on:
      postgres:
        condition: service_healthy

  frontend:
    build:
      context: ./services/frontend
      args:
        - NEXT_PUBLIC_STRAPI_URL=http://strapi:1337
        - NEXT_PUBLIC_DEMO_MODE=true
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_STRAPI_URL=http://strapi:1337
      - STRAPI_API_TOKEN=${READ_ONLY_TOKEN}
      - NEXT_PUBLIC_DEMO_MODE=true
    # depends_on:
    #   - strapi

volumes:
  postgres_data:
  strapi_uploads: {} 